{"ast":null,"code":"class Api {\n  constructor(options) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n  getInitialCardsAndUserInfo() {\n    return Promise.all([this.getInitialCards(), this.getUserInfo()]);\n  }\n\n  async getUserInfo() {\n    const res = await fetch(this.baseUrl + '/users/me', {\n      headers: this.headers\n    });\n\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async getInitialCards() {\n    const res = await fetch(this.baseUrl + '/cards', {\n      headers: this.headers\n    });\n\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async updateCardLikes(cardId, isLiked) {\n    const method = isLiked ? 'DELETE' : 'PUT';\n    const res = await fetch(this.baseUrl + '/cards/likes/' + cardId, {\n      headers: this.headers,\n      method: method\n    });\n\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async deleteCard(cardId) {\n    const res = await fetch(this.baseUrl + '/cards/' + cardId, {\n      headers: this.headers,\n      method: 'DELETE'\n    });\n\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async postCard({\n    title,\n    url\n  }) {\n    const res = await fetch(this.baseUrl + '/cards', {\n      headers: this.headers,\n      method: 'POST',\n      body: JSON.stringify({\n        name: title,\n        link: url\n      })\n    });\n\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async patchAvatarImage(url) {\n    const res = await fetch(this.baseUrl + '/users/me/avatar', {\n      headers: this.headers,\n      method: 'PATCH',\n      body: JSON.stringify({\n        avatar: url\n      })\n    });\n\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async patchUserInfo(info) {\n    const res = await fetch(this.baseUrl + '/users/me', {\n      headers: this.headers,\n      method: 'PATCH',\n      body: JSON.stringify({\n        name: info.name,\n        about: info.job\n      })\n    });\n\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://around.nomoreparties.co/v1/group-5',\n  headers: {\n    authorization: '8cd049ee-8ebb-4e3d-8437-51e87560cee5',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/derekschinke/Documents/Developer/Practicum by Yandex/Web Developer/dev/around-react/src/utils/api.js"],"names":["Api","constructor","options","baseUrl","headers","getInitialCardsAndUserInfo","Promise","all","getInitialCards","getUserInfo","res","fetch","ok","json","reject","status","updateCardLikes","cardId","isLiked","method","deleteCard","postCard","title","url","body","JSON","stringify","name","link","patchAvatarImage","avatar","patchUserInfo","info","about","job","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor(options) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n  getInitialCardsAndUserInfo() {\n    return Promise.all([this.getInitialCards(), this.getUserInfo()]);\n  }\n\n  async getUserInfo() {\n    const res = await fetch(this.baseUrl + '/users/me', {\n      headers: this.headers,\n    });\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async getInitialCards() {\n    const res = await fetch(this.baseUrl + '/cards', {\n      headers: this.headers,\n    });\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async updateCardLikes(cardId, isLiked) {\n    const method = isLiked ? 'DELETE' : 'PUT';\n    const res = await fetch(this.baseUrl + '/cards/likes/' + cardId, {\n      headers: this.headers,\n      method: method,\n    });\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async deleteCard(cardId) {\n    const res = await fetch(this.baseUrl + '/cards/' + cardId, {\n      headers: this.headers,\n      method: 'DELETE',\n    });\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async postCard({ title, url }) {\n    const res = await fetch(this.baseUrl + '/cards', {\n      headers: this.headers,\n      method: 'POST',\n      body: JSON.stringify({ name: title, link: url }),\n    });\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async patchAvatarImage(url) {\n    const res = await fetch(this.baseUrl + '/users/me/avatar', {\n      headers: this.headers,\n      method: 'PATCH',\n      body: JSON.stringify({ avatar: url }),\n    });\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  async patchUserInfo(info) {\n    const res = await fetch(this.baseUrl + '/users/me', {\n      headers: this.headers,\n      method: 'PATCH',\n      body: JSON.stringify({ name: info.name, about: info.job }),\n    });\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n}\n\nconst api = new Api({\n  baseUrl: 'https://around.nomoreparties.co/v1/group-5',\n  headers: {\n    authorization: '8cd049ee-8ebb-4e3d-8437-51e87560cee5',\n    'Content-Type': 'application/json',\n  },\n});\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}